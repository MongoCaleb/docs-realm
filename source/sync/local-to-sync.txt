.. _realm-sync-local-to-sync:

=======================================
Convert a Local Realm to a Synced Realm
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
Suppose you have an app using a local {+client-database+}. The requirements for 
the app have changed, and you now want to convert the system to use 
{+realm+}'s automatic data synchronization.

To convert your app to use a synced {+client-database+}, there are a few steps you 
need to follow. This change requires setting up a {+backend-short+} 
backend, and then making changes in the client app code. 

In the following sections, you will learn to do the following on the backend:

- Create a new {+realm+} app in {+atlas+}
- Configure a User Authentication provider
- Choose a partition strategy

And then, in your client app, you will:

- Update your {+service-short+} object models
- Connect with a sync configuration file
- Authenticate the user

Create a Backend App
--------------------
To sync your data between devices and with {+atlas+}, you first need to create 
a {+realm+} app. This app serves -- at a minimum -- two purposes: it provides a 
gateway to the data, and it provides data security in the form of user 
authentication, data encryption, and access control.

To get started, follow the steps in 
:ref:`Create a Realm App (Realm UI) <create-a-realm-app>`.

Enable Authentication
~~~~~~~~~~~~~~~~~~~~~
User authentication plays a crucial role in {+sync+}. {+realm+} provides 
many different authentication providers; once you have configured one or more,
you can then control exactly who has access to which data. From a Sync perspective, 
it doesn't matter which authentication method you choose.

To get started, learn about the 
:ref:`Authentication Providers <authentication-providers>` and then 
follow the configuration steps for the provider(s) of your choice.

Partition the Data 
~~~~~~~~~~~~~~~~~~
Data :ref:`partitioning <partitioning>` strategies enable you to configure which 
users have access to which data. This process is often the most time-consuming 
part of setting up {+sync+}, as you want to consider the ramifications of 
different strategies.

Once you determine your 
:ref:`partition strategy <partition-strategies>` and choose a
:ref:`partition key <partition-keys>`, you may need to update your existing object 
models to include the partition field, unless you have chosen an existing field.

Update the Client App
---------------------
Now that you have the backend set up for Sync, you need to make a few changes in 
your client app. Since each SDk is different, choose the tab below for your 
platform / language to get started:

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      gggdfsg


   .. tab::
      :tabid: ios

      sgdfghdgfjhrtyu


   .. tab::
      :tabid: dotnet

      1. At the top of each C# file that uses Realm, add this additional ``using``
         statement:

         .. code-block:: csharp

            using Realms.Sync;

      2. In your local-only app, you don't initialize a Realm app. In a 
         Sync-enabled app, you use ``App.Create``:

         .. code-block:: csharp

            Realms.Sync.App app = App.Create(myRealmAppId);

      3. You have already defined one or more object models. If these models 
         do not currently have a property that maps to the partition key you 
         selected when creating the backend, you'll need to add that property. 
         For example, we have added a ``Partition`` property to this ``Task`` 
         object:

         .. literalinclude:: /examples/generated/dotnet/Task.codeblock.task-object-model.cs
            :language: csharp
            :emphasize-lines: 12-14

      4. Authenticate the user by calling the appropriate authentication method, 
         based on which provider you have set up. The following example uses 
         Anonymous authentication; for details on implementing each of the 
         providers, see :ref:`Authentication <dotnet-authenticate>`.

         .. literalinclude:: /examples/generated/dotnet/Examples.codeblock.anon-login.cs
            :language: csharp

      5. You can now open a synced :ref:`{+realm+} <dotnet-realms>`. Use the 
         ``SyncConfiguration`` to control the specifics of how your application 
         synchronizes data with {+backend+}. The configuration which might 
         include the :ref:`partition <partitioning>` name,  whether to wait for 
         an initial batch of data to sync, and more.

         .. literalinclude:: /examples/generated/dotnet/Examples.codeblock.config.cs
            :language: csharp

   .. tab::
      :tabid: react-native

      asdfasdf

   .. tab::
      :tabid: node

      werqwer

   .. tab::
      :tabid: web

      asdf