.. _dotnet-client-resets:

========================
Client Resets - .NET SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

When using :ref:`Device Sync <sync>`, it is possible that your client app will 
need to handle a client reset. While not a common event, you need to perform 
a client reset when Sync is terminated on the server. For example, when a developer 
deploys a change that includes a destructive schema change. To fix this, you must 
stop Sync, modify the schema, and then re-enable Sync. This process causes the 
server to send a client reset message to the clients.

By default, the SDK handles client reset messages automatically, but only on app 
startup. Until the app is restarted, users will receive no new data from the server,
and any changes on the device are lost when the app is restarted and the 
reset happens.

The .NET SDK provides the option to specify a client 
reset strategy in your :dotnet-sdk:`PartitionSyncConfiguration 
<reference/Realms.Sync.PartitionSyncConfiguration.html>` and 
:dotnet-sdk:`FlexibleSyncConfiguration 
<reference/Realms.Sync.FlexibleSyncConfiguration.html>`. The 
:dotnet-sdk:`ClientResetHandler <reference/Realms.Sync.SyncConfigurationBase.html#Realms_Sync_SyncConfigurationBase_ClientResetHandler>` 
property can be set to one of the following:

.. list-table::
   :header-rows: 1
   :widths: 30 30 50
   
   * - Handler
     - Strategy
     - Notes

   * - :dotnet-sdk:`RecoverOrDiscardUnsyncedChangesHandler <reference/Realms.Sync.ErrorHandling.RecoverOrDiscardUnsyncedChangesHandler.html>`
       This is the default handler.
     - Recover all Unsynced Local Changes
     - If recovery fails, this handler falls back to the DiscardUnsyncedChangesHandler, 
       which deletes all unsycned local changes. This is the default client 
       reset handler.

   * - :dotnet-sdk:`RecoverUnsyncedChangesHandler <reference/Realms.Sync.ErrorHandling.RecoverUnsyncedChangesHandler.html>`
     - Recover all Unsynced Local Changes
     - If recovery fails, this handler falls back to a ManualRecoveryHandler, which
       requires you to implement a recovery strategy.

   * - :dotnet-sdk:`DiscardUnsyncedChangesHandler <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html>`
     - Discard Unsynced Changes
     - This strategy *permanently deletes* all local unsynced changes made since 
       the last successful sync.

   * - :dotnet-sdk:`ManualRecoveryHandler <reference/Realms.Sync.ErrorHandling.ManualRecoveryHandler.html>`
     - Manual Recovery
     - Provides a way for you to implement your own recovery strategy.

Client Reset Strategies
-----------------------

The following sections describe the different strategies for handling a client 
reset and how you can use each of the ``ClientResetHandlers``.

Recover All Unsynced Local Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This strategy attempts to recover all unsynced local changes automatically. There 
are two client reset handlers that take this approach:

RecoverOrDiscardUnsyncedChangesHandler
======================================

This is the default handler, as it provides the most robust recovery process. If the 
recovery process fails, it falls back to the DiscardLocalReset strategy explained 
below. If that process fails, it falls back again to a Manual Reset strategy. 
This handler provides the following callback methods:

- :dotnet-sdk:`OnBeforeReset 
  <>`, 
  which the SDK invokes prior to the client reset. You can use this callback to notify 
  the user before the reset begins.

- :dotnet-sdk:`OnAfterRecovery
  <>`, 
  which the SDK invokes if -- and only if -- the automatic reset completes successfully. 
  You can use it to notify the user that the client reset is complete.

- :dotnet-sdk:`OnAfterDiscard 
  <>`, 
  which the SDK invokes only if the automatic client reset fails **and** the discard 
  local strategy *succeeds*. If the discard strategy fails, this callback is not 
  invoked.

- :dotnet-sdk:`ManualResetFallback 
  <>`, 
  which the SDK invokes only if the automatic 
  recovery and the discard strategy have failed. You implement this callback to 
  handle the reset failure. Your logic here will 
  be similar to that described for a 
  :ref:`ManualRecoveryHandler <manual_recovery_handler>`.

The following example shows using each of these callbacks:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.RecoverOrDiscardUnsyncedChangesHandler.cs
   :language: csharp

RecoverUnsyncedChangesHandler
=============================

Like the ``RecoverOrDiscardUnsyncedChangesHandler``, this handler attempts to 
recover all unsynced local changes automatically. Unlike 
``RecoverOrDiscardUnsyncedChangesHandler``, however, this handler does not try a 
DiscardUnsyncedChangesHandler if the automatic recovery fails. The handler 
provides the following callback methods:

- :dotnet-sdk:`OnBeforeReset 
  <>`, 
  which you can use to notify the user before the reset begins.

- :dotnet-sdk:`OnAfterReset 
  <>`, 
  which you can use to notify the user when the reset has completed successfully.

- :dotnet-sdk:`ManualResetFallback 
  <>`, 
  which you implement to handle a reset failure. Your logic here will 
  be similar to that described for a 
  :ref:`ManualRecoveryHandler <manual_recovery_handler>`.

The following example shows using each of these callbacks:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.RecoverUnsyncedChangesHandler.cs
   :language: csharp

Discard Unsynced Changes
~~~~~~~~~~~~~~~~~~~~~~~~

This strategy **permanently deletes** all local unsynced changes 
made since the last successful sync. When you specify a 
``DiscardUnsyncedChangesHandler``, the SDK restores your local realm file 
to a syncable state without closing the realm and while maintaining notifications. 
This handler provides the following callback methods:

- :dotnet-sdk:`OnBeforeReset 
  <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_DiscardUnsyncedChangesHandler_OnBeforeReset>`, 
  which the SDK invokes prior to the client reset. You can use this callback to 
  notify the user before the reset begins.

- :dotnet-sdk:`OnAfterReset 
  <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_DiscardUnsyncedChangesHandler_OnAfterReset>`, 
  which the SDK invokes if -- and only if -- the reset completes successfully. 
  You can use it to notify the user when the reset is complete.

- :dotnet-sdk:`ManualResetFallback <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_DiscardUnsyncedChangesHandler_ManualResetFallback>`,
  which the SDK invokes if the reset fails. Your logic here will 
  be similar to that described for a 
  :ref:`ManualRecoveryHandler <manual_recovery_handler>`.

The following example shows how you might implement a DiscardUnsyncedChangesHandler:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.DiscardUnsyncedChangesHandler.cs
   :language: csharp

.. _manual_recovery_handler:

Manual Recovery
~~~~~~~~~~~~~~~

Use this strategy to customize your data recovery process. You use the 
:dotnet-sdk:`ManualRecoveryHandler(ClientResetException) <reference/Realms.Sync.ErrorHandling.ManualRecoveryHandler.html#Realms_Sync_ErrorHandling_ManualRecoveryHandler__ctor_Realms_Sync_ErrorHandling_ClientResetHandlerBase_ClientResetCallback_>` 
handler to do this. 

.. note:: Fallbacks

   The other handlers fallback to a manual strategy if the other options fail 
   (as in the case of a destructive schema change). 

Within the ``ManualRecoveryHandler``, you dispose the existing realm, and then 
call the :dotnet-sdk:`InitiateClientReset() <reference/Realms.Sync.Exceptions.ClientResetException.html#Realms_Sync_Exceptions_ClientResetException_InitiateClientReset>` 
method.

The following example demonstrates implementing the ManualRecoveryHandler:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.ManualClientReset.cs
   :language: csharp

.. important::

   Be sure to use the overload of the ``ManualRecoveryHandler`` that takes a 
   :dotnet-sdk:`ClientResetException <reference/Realms.Sync.Exceptions.ClientResetException.html>` 
   parameter.
