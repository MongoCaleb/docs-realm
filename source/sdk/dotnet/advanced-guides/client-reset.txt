.. _dotnet-client-resets:

========================
Client Resets - .NET SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

A client reset error is a scenario where a client realm cannot sync 
data with the application backend. Clients in this state may continue to 
run and save data locally but cannot send or receive sync changesets 
until they perform a client reset. The Realm SDKs provide methods to 
automatically handle client resets under most scenarios.

For more information, see :ref:`client-resets`.

In the .NET SDK, you can specify a client 
reset strategy in your :dotnet-sdk:`FlexibleSyncConfiguration <reference/Realms.Sync.FlexibleSyncConfiguration.html>`
and :dotnet-sdk:`PartitionSyncConfiguration <reference/Realms.Sync.PartitionSyncConfiguration.html>`.
The :dotnet-sdk:`ClientResetHandler <reference/Realms.Sync.SyncConfigurationBase.html#Realms_Sync_SyncConfigurationBase_ClientResetHandler>` 
property can be set to one of the following:

.. list-table::
   :header-rows: 1
   :widths: 30 30 50
   
   * - Handler
     - Strategy
     - Notes

   * - :dotnet-sdk:`RecoverOrDiscardUnsyncedChangesHandler <reference/Realms.Sync.ErrorHandling.RecoverOrDiscardUnsyncedChangesHandler.html>`
       (Default)
     - Recover all unsynced local changes
     - If recovery fails, this handler falls back to the DiscardUnsyncedChangesHandler, 
       which deletes all unsynced local changes. If the DiscardUnsyncedChangesHandler 
       recovery fails, the handler falls back to a ManualRecoveryHandler, which
       requires you to implement a recovery strategy.

   * - :dotnet-sdk:`RecoverUnsyncedChangesHandler <reference/Realms.Sync.ErrorHandling.RecoverUnsyncedChangesHandler.html>`
     - Recover all unsynced local changes
     - If recovery fails, this handler falls back to a ManualRecoveryHandler, which
       requires you to implement a recovery strategy.

   * - :dotnet-sdk:`DiscardUnsyncedChangesHandler <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html>`
     - Discard unsynced changes
     - This strategy *permanently deletes* all local unsynced changes made since 
       the last successful sync.

   * - :dotnet-sdk:`ManualRecoveryHandler <reference/Realms.Sync.ErrorHandling.ManualRecoveryHandler.html>`
     - Manual recovery
     - Provides a way for you to implement your own recovery strategy.

Client Reset Strategies
-----------------------

The following sections describe the different strategies for handling a client 
reset and how you can use each of the ``ClientResetHandlers``.

Recover All Unsynced Local Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This strategy attempts to recover all unsynced local changes automatically. There 
are two client reset handlers that take this approach:

RecoverOrDiscardUnsyncedChangesHandler
``````````````````````````````````````

This is the default handler, as it provides the most robust recovery process. If 
the automatic recovery process fails, it falls back to the DiscardLocalReset 
strategy explained below. If that process fails, it falls back again to a 
manual reset strategy. 
This handler provides the following callback methods:

- :dotnet-sdk:`OnBeforeReset 
  <reference/Realms.Sync.ErrorHandling.RecoverOrDiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_RecoverOrDiscardUnsyncedChangesHandler_OnBeforeReset>`, 
  which the SDK invokes prior to the client reset. You can use this callback to notify 
  the user before the reset begins.

- :dotnet-sdk:`OnAfterRecovery
  <reference/Realms.Sync.ErrorHandling.RecoverOrDiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_RecoverOrDiscardUnsyncedChangesHandler_OnAfterRecovery>`, 
  which the SDK invokes if *and only if* the automatic reset completes successfully. 
  You can use it to notify the user that the client reset is complete.

- :dotnet-sdk:`OnAfterDiscard 
  <reference/Realms.Sync.ErrorHandling.RecoverOrDiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_RecoverOrDiscardUnsyncedChangesHandler_OnAfterDiscard>`, 
  which the SDK invokes only if the automatic client reset fails **and** the discard 
  local strategy succeeds. If the discard strategy fails, this callback is not 
  invoked.

- :dotnet-sdk:`ManualResetFallback 
  <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html>`, 
  which the SDK invokes only if the automatic 
  recovery and the discard strategy have failed. You implement this callback to 
  handle the reset failure. Your logic here should 
  be similar to that described for a 
  :ref:`ManualRecoveryHandler <manual_recovery_handler>`.

The following example shows using each of these callbacks:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.RecoverOrDiscardUnsyncedChangesHandler.cs
   :language: csharp

RecoverUnsyncedChangesHandler
`````````````````````````````

Like the ``RecoverOrDiscardUnsyncedChangesHandler``, this handler attempts to 
recover all unsynced local changes automatically. However, unlike  
``RecoverOrDiscardUnsyncedChangesHandler``, this handler does not fall back to a
DiscardUnsyncedChangesHandler if the automatic recovery fails. The handler 
provides the following callback methods:

- :dotnet-sdk:`OnBeforeReset 
  <reference/Realms.Sync.ErrorHandling.RecoverUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_RecoverUnsyncedChangesHandler_OnBeforeReset>`, 
  which you can use to notify the user before the reset begins.

- :dotnet-sdk:`OnAfterReset 
  <reference/Realms.Sync.ErrorHandling.RecoverUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_RecoverUnsyncedChangesHandler_OnAfterReset>`, 
  which you can use to notify the user when the reset has completed successfully.

- :dotnet-sdk:`ManualResetFallback 
  <reference/Realms.Sync.ErrorHandling.RecoverUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_RecoverUnsyncedChangesHandler_ManualResetFallback>`, 
  which you implement to handle a reset failure. Your logic here should  
  be similar to that described for a 
  :ref:`ManualRecoveryHandler <manual_recovery_handler>`.

The following example shows using each of these callbacks:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.RecoverUnsyncedChangesHandler.cs
   :language: csharp

Discard Unsynced Changes
~~~~~~~~~~~~~~~~~~~~~~~~

This strategy **permanently deletes** all local unsynced changes 
made since the last successful sync. If you choose to use a 
``DiscardUnsyncedChangesHandler``, the SDK restores your local realm file 
to a syncable state without closing the realm and while keeping notifications 
fully working. This handler provides the following callback methods:

- :dotnet-sdk:`OnBeforeReset 
  <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_DiscardUnsyncedChangesHandler_OnBeforeReset>`, 
  which the SDK invokes prior to the client reset. You can use this callback to 
  notify the user before the reset begins.

- :dotnet-sdk:`OnAfterReset 
  <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_DiscardUnsyncedChangesHandler_OnAfterReset>`, 
  which the SDK invokes if *and only if* the reset completes successfully. 
  You can use it to notify the user when the reset is complete.

- :dotnet-sdk:`ManualResetFallback <reference/Realms.Sync.ErrorHandling.DiscardUnsyncedChangesHandler.html#Realms_Sync_ErrorHandling_DiscardUnsyncedChangesHandler_ManualResetFallback>`,
  which the SDK invokes if the reset fails. Your logic here should  
  be similar to that described for a 
  :ref:`ManualRecoveryHandler <manual_recovery_handler>`.

The following example shows how you might implement a 
``DiscardUnsyncedChangesHandler``:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.DiscardUnsyncedChangesHandler.cs
   :language: csharp

.. _manual_recovery_handler:

Manual Recovery
~~~~~~~~~~~~~~~

In most cases, you should use one of the other strategies for client resets. For 
those infrequent cases where you need to customize your data recovery process, 
select the 
:dotnet-sdk:`ManualRecoveryHandler <reference/Realms.Sync.ErrorHandling.ManualRecoveryHandler.html#Realms_Sync_ErrorHandling_ManualRecoveryHandler__ctor_Realms_Sync_ErrorHandling_ClientResetHandlerBase_ClientResetCallback_>` 
handler. 

.. note:: Fallbacks

   While the manual strategy should only be used in edge cases, the other 
   handlers might fall back to a manual strategy (as in the case of a destructive 
   schema change). The logic you use in those handlers is similar to the logic 
   described here.

Within the ``ManualRecoveryHandler``, you dispose the existing realm, and then 
call the :dotnet-sdk:`InitiateClientReset() <reference/Realms.Sync.Exceptions.ClientResetException.html#Realms_Sync_Exceptions_ClientResetException_InitiateClientReset>` 
method.

The following example demonstrates implementing the ``ManualRecoveryHandler``:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.ManualClientReset.cs
   :language: csharp
