.. _dotnet-bundle-a-realm:

=======================================
Copy and Bundle a Realm File - .NET SDK
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You might want to seed your mobile app with some initial data that will be available
to users on the initial launch of the app. To do this, you:

- Build a temporary {+realm+} app,

- Make a copy of an existing {+realm+} (with only the data you want bundled), and then 

- Bundle the :ref:`Realm file <dotnet-realm-file>` in your app's shared project. 

In your production app (the one that will use this bundled {+realm+} when first 
loading), you add a few lines of code to extract the {+realm+} and save it in the 
app data. The following sections provide more information on these steps.

.. _copy_a_realm_file:

Copy a Realm File
-----------------

1. Create a new project with the same data models as your production app. Open 
   an existing {+realm+} with the data you wish to bundle.

#. Use the 
   :dotnet-sdk:`WriteCopy() <reference/Realms.Realm.html#Realms_Realm_WriteCopy_Realms_RealmConfigurationBase_>` 
   method to make a copy of the {+realm+} to a new location and/or name. The 
   following code demonstrates this:

   .. literalinclude:: /examples/generated/dotnet/WriteCopy.codeblock.copy_a_realm.cs
      :language: csharp

   .. important:: Copying a Synced Realm
   
      If you are making a copy of a Synced {+realm+}, you should ensure that the 
      {+realm+} is up-to-date before making a copy. You can do this by calling 
      ``WaitForUploadAsync()`` and ``WaitForDownloadAsync()``:
      
      .. code-block:: csharp
         :copyable: false
      
         await realm.GetSession().WaitForUploadAsync();
         await realm.GetSession().WaitForDownloadAsync();
   

Include the Realm File in Your Project
--------------------------------------
Now that you have a copy of the {+realm+} with the "seed" data in it, you 
need to bundle it with your production application. The process of bundling 
depends on whether you are building a mobile app or Unity app:

.. tabs::

   .. tab:: Xamarin
      :tabid: xamarin

      1. Navigate to the path you specified for the new realm, and then drag the 
         newly-created {+realm+} file to the shared Xamarin project in Visual Studio. 

      #. When prompted, choose :guilabel:`Copy the file to the directory`.

      #. In the shared project, right-click the {+realm+} file you just added, choose 
         :guilabel:`Build Action`, and then choose :guilabel:`EmbeddedResource`.

         .. note:: Cross-Platform Compatibility

            Non-encrypted {+realm+} files are cross-platform compatible, which 
            is why you can bundle the file in the shared project.

   .. tab:: Unity
      :tabid: unity

      1. Open your production Unity app.
      
      2. Copy the new {+realm+} file to the project folder of the app. It will 
         now be deployed with the app.


Using the Copied Realm File
---------------------------
Now that you have a copy of the {+realm+} included with your app, you need to 
add code to use it. The code you add depends on the type of app:

.. tabs::

   .. tab:: Xamarin
      :tabid: xamarin

      Before you deploy your app with the bundled {+realm+}, you need to add code to 
      extract the {+realm+} from the embedded resources, save it to the app's data 
      location, and then use this new copy in the app. The following code shows how 
      you can do this during start-up of the app; note that it will only run when no 
      {+realm+} file is found at the specified location.

      .. literalinclude:: /examples/generated/dotnet/WriteCopy.codeblock.extract_and_copy_realm.cs
         :language: csharp

   .. tab:: Unity
      :tabid: unity

      The embedded {+realm+} is initialized like any other {+realm+} in a Unity 
      project:

      .. literalinclude:: /examples/generated/dotnet/Unity.codeblock.read_a_realm_unity.cs
         :language: csharp


.. important:: Reading a Synced Realm
   
      If you are instantiating a new copy of a Synced {+realm+}, ensure that the 
      {+realm+} is fully synced before using it. As with copying a Synced {+realm+}, 
      be sure to call ``WaitForUploadAsync()`` and ``WaitForDownloadAsync()``.
   