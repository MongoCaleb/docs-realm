.. _dotnet-data-binding:

=======================
Data Binding - .NET SDK
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In Xamarin and MAUI applications, data binding enables UI updates when an 
underlying object or collection changes, and vice versa.

Realm objects and collections are :ref:`live <dotnet-live-object>` and update 
automatically to reflect data changes. This is because 
Realm objects implement 
`INotifyPropertyChanged <https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged>`__ 
and Realm collections implement 
`INotifyCollectionChanged <https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged>`__. 
When you bind live collections and objects to your UI, both the UI and live 
objects and collections update at the same time.

.. important:: Don't Use ToList()

   Because Realm collections are live, you should not call ``ToList()``. Doing so 
   forces loading the collection from memory, so the resulting collection is 
   no longer a live object.

Data Binding Examples
---------------------
The following code snippets show both the C# and XAML for 3 typical data 
binding use cases. They all use the following Realm objects:

.. literalinclude:: /examples/generated/dotnet/Models.snippet.binding-classes.cs
   :language: csharp

Binding to a Single Realm Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In the following example, we create a public property of type Employee. Elsewhere 
in our class, we query our realm for the Employee with an ``EmployeeId`` of "123":

.. literalinclude:: /examples/generated/dotnet/MainPage.xaml.snippet.bind-one-cs.cs
   :language: csharp

In out XAML, we bind the Employee's ``Name`` property to a ``Label`` control's 
``Text`` property:

.. literalinclude:: /examples/generated/dotnet/MainPage.snippet.bind-one-xaml.xaml
   :language: xml

Binding to a Realm Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this code example, we create a public ``IEnumerable`` of the ``Item``
Realm object and then populate that collection with all 
of the documents in the Items collection:

.. literalinclude:: /examples/generated/dotnet/MainPage.xaml.snippet.bind-list-cs.cs
   :language: csharp

In the associated XAML file, we bind a ``ListView`` to the **Items** ``IEnumerable`` 
and then use the Item's property values to display information in the ListView:

.. literalinclude:: /examples/generated/dotnet/MainPage.snippet.bind-list-xaml.xaml
   :language: xml

Binding to an Embedded Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example, we bind to a collection of Items within the ``Items`` property 
of a specific ``Employee``. 

.. literalinclude:: /examples/generated/dotnet/MainPage.xaml.snippet.bind-embedded-cs.cs
   :language: csharp

The XAML implementation is just like the example above:

.. literalinclude:: /examples/generated/dotnet/MainPage.snippet.bind-embedded-xaml.xaml
   :language: xml

